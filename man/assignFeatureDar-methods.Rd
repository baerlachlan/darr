% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/assignFeatureDar.R
\name{assignFeatureDar}
\alias{assignFeatureDar}
\alias{assignFeatureDar,GRanges,GRangesList-method}
\title{Assign DAR values to genomic features}
\usage{
assignFeatureDar(features, dar, ...)

\S4method{assignFeatureDar}{GRanges,GRangesList}(features, dar, darVal = c("smooth", "raw"))
}
\arguments{
\item{features}{A GRanges object specifying the features of interest}

\item{dar}{A GRangesList with ranges representing either single base
positions for raw DAR values or windows for smoothed DAR values.
DAR values for each range must exist in metadata columns.
Windows are recommended to assign the greatest number of features with
DAR values.
Alternatively, the use of single base positions results in a more precise
representation of DAR for overlapping features}

\item{...}{Not used}

\item{darVal}{A character specifying the whether to use raw or smoothed DAR
values for the chosen ranges.
Possible options are "raw" and "smooth".
Raw DAR values should be chosen for single base positions, while
smoothed DAR values should be chosen for windows}
}
\value{
A GRangesList with ranges representing features of interest that
overlap at least one DAR range.
Feature metadata columns are retained and an additional column is added
for the assigned DAR value.
Each element of the list represents a DAR analysis between two sample groups
}
\description{
Assign DAR values to genomic features of interest by
averaging the DAR values at ranges that overlap the feature range
}
\examples{
data("chr1_genes")
fl <- system.file("extdata", "chr1.vcf.bgz", package="darr")
genotypes <- readGenotypes(fl)
groups <- list(
    group1 = c("S2", "S7", "S9", "S10", "S19", "S20"),
    group2 = c("S3", "S6", "S11", "S12", "S15", "S16", "S18")
)
counts <- countAlleles(genotypes, groups)
props <- countsToProps(counts)
contrasts <- matrix(
    data = c(1, -1),
    dimnames = list(
        Levels = c("group1", "group2"),
        Contrasts = c("group1v2")
    )
)
dar <- dar(props, contrasts)
assignFeatureDar(chr1_genes, dar, darVal = "raw")

darSmooth <- smoothDar(dar, winSize = 5)
darWindows <- getWinRanges(darSmooth, extendEdges = TRUE)
assignFeatureDar(chr1_genes, darWindows, darVal = "smooth")

}
